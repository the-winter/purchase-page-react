{"version":3,"sources":["assets/images/black.jpg","assets/images/brown.jpg","assets/images/black-min.jpg","assets/images/brown-min.jpg","assets/images/left-arrow.svg","components/details-block.js","components/color-select.js","components/add-button.js","components/headphones.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Details","props","react_default","a","createElement","className","textChoice","ColorSelector","ButtonToolbar","DropdownButton","title","color","id","onSelect","colorChoice","MenuItem","eventKey","Button","onClick","onAddToCart","buttonLabel","blackHeadphones","require","brownHeadphones","blackHeadphonesMin","brownHeadphonesMin","Headphones","react_responsive_default","query","style","maxHeight","src","alt","leftArrow","App","state","choice","_this","setState","parseInt","setTimeout","this","bind","Object","assertThisInitialized","_this2","_this$state","map","option","i","key","details_block_Details","color_select_ColorSelector","add_button_Button","headphones_Headphones","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20fb2c58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black.f15015b0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brown.7e64f6d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/black-min.3a01c99a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brown-min.3f03d49f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/left-arrow.a2325768.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Details = props => {\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"details-block\">\n\t\t\t\t{props.textChoice === 'details'\n\t\t\t\t\t? `Headphones type - Over-Ear\\\n                        \n                        Headphones use - Home Audio\\\n                        \n                        Colour - Black\\\n                        \n                        Built-in microphone - True\\\n                        \n                        Manufacturer's warranty - 1 Year`\n\t\t\t\t\t: 'Springing from Audio-Technicaâ€™s rich heritage in professional audio, the ATH-MSR7 Over-Ear High-Resolution Audio (*See definition below) Headphones are designed to reproduce Hi-Res Audio, allowing users to hear music the way it was intended. The headphones are outfitted with exclusive 45 mm True Motion Drivers, which utilize lightweight voice coils, a custom-mounted printed circuit board and specially designed diaphragm to improve transient response and minimize sound distortion for rich, detailed audio reproduction.'}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nDetails.propTypes = {\n\ttextChoice: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownButton, ButtonToolbar, MenuItem } from 'react-bootstrap';\n\nexport const ColorSelector = props => {\n\treturn (\n\t\t<div className=\"color-dropdown\">\n\t\t\t<p>COLORS</p>\n\t\t\t<ButtonToolbar>\n\t\t\t\t<DropdownButton title={props.color} id=\"dropdown-size-medium\" onSelect={props.colorChoice}>\n\t\t\t\t\t<MenuItem eventKey=\"1\">black</MenuItem>\n\t\t\t\t\t<MenuItem eventKey=\"2\">brown</MenuItem>\n\t\t\t\t</DropdownButton>\n\t\t\t</ButtonToolbar>\n\t\t</div>\n\t);\n};\n\nColorSelector.propTypes = {\n\tcolor: PropTypes.string,\n\tcolorChoice: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Button = props => {\n\treturn (\n\t\t<div className=\"button-container\">\n\t\t\t<button className=\"add-btn-style\" onClick={props.onAddToCart}>\n\t\t\t\t{props.buttonLabel}\n\t\t\t</button>\n\t\t\t<p>{props.buttonLabel === 'VIEW CART' ? 'Item added to cart!' : ''}</p>\n\t\t</div>\n\t);\n};\n\nButton.propTypes = {\n\tbuttonLabel: PropTypes.string,\n\tonAddToCart: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MediaQuery from 'react-responsive';\n\nconst blackHeadphones = require('../assets/images/black.jpg');\nconst brownHeadphones = require('../assets/images/brown.jpg');\nconst blackHeadphonesMin = require('../assets/images/black-min.jpg');\nconst brownHeadphonesMin = require('../assets/images/brown-min.jpg');\n\nexport const Headphones = props => {\n\treturn (\n\t\t<div className=\"headphones-container\">\n\t\t\t<MediaQuery query=\"(min-width: 577px)\">\n\t\t\t\t<img\n\t\t\t\t\tstyle={{ maxHeight: '750px' }}\n\t\t\t\t\tclassName=\"img-responsive\"\n\t\t\t\t\tsrc={props.color === 'black' ? blackHeadphones : brownHeadphones}\n\t\t\t\t\talt=\"img\"\n\t\t\t\t/>\n\t\t\t</MediaQuery>\n\t\t\t<MediaQuery query=\"(max-width: 576px)\">\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"img-responsive\"\n\t\t\t\t\tsrc={props.color === 'black' ? blackHeadphonesMin : brownHeadphonesMin}\n\t\t\t\t\talt=\"img\"\n\t\t\t\t/>\n\t\t\t</MediaQuery>\n\t\t</div>\n\t);\n};\n\nHeadphones.propTypes = {\n\tcolor: PropTypes.string,\n};\n","import React, { Component } from 'react';\nimport { Details } from './components/details-block';\nimport { ColorSelector } from './components/color-select';\nimport { Button } from './components/add-button';\nimport { Headphones } from './components/headphones';\nimport './App.css';\n\nconst leftArrow = require('./assets/images/left-arrow.svg');\n\nclass App extends Component {\n\tstate = {\n\t\ttextChoice: 'description',\n\t\tcolor: 'black',\n\t\tbuttonLabel: 'ADD TO CART',\n\t};\n\n\ttextChoice = choice => {\n\t\tthis.setState({ textChoice: choice });\n\t};\n\n\tcolorChoice = choice => {\n\t\tif (parseInt(choice) === 1) {\n\t\t\tthis.setState({ color: 'black' });\n\t\t} else {\n\t\t\tthis.setState({ color: 'brown' });\n\t\t}\n\t};\n\n\tonAddToCart = () => {\n\t\tthis.setState({ buttonLabel: 'Loading...' });\n\t\tsetTimeout(\n\t\t\tfunction() {\n\t\t\t\tthis.setState({ buttonLabel: 'VIEW CART' });\n\t\t\t}.bind(this),\n\t\t\t2000\n\t\t);\n\t};\n\n\trender() {\n\t\tconst { textChoice, color, buttonLabel } = this.state;\n\t\tconst textOptions = ['description', 'details'];\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid container-styles\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-sm-6 vertical-divider\">\n\t\t\t\t\t\t<div className=\"first-block\">\n\t\t\t\t\t\t\t<div className=\"all-products\">\n\t\t\t\t\t\t\t\t<img src={leftArrow} alt=\"back\" />\n\t\t\t\t\t\t\t\t<p>All products</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"header-wrap\">\n\t\t\t\t\t\t\t\t<h2>Audio-Technica ATH-MSR7</h2>\n\t\t\t\t\t\t\t\t<p>2017 Best Headphones of the Year Award</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-to-select\">\n\t\t\t\t\t\t\t\t{textOptions.map((option, i) => (\n\t\t\t\t\t\t\t\t\t// why does the onclick function need to be wrapped?\n\t\t\t\t\t\t\t\t\t<div className={option === textChoice ? 'active' : 'inactive'} key={i}>\n\t\t\t\t\t\t\t\t\t\t<p onClick={() => this.textChoice(option)}>{option}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"second-block\">\n\t\t\t\t\t\t\t<Details textChoice={textChoice} />\n\t\t\t\t\t\t\t<div className=\"pricing\">\n\t\t\t\t\t\t\t\t<h3>$59.99</h3>\n\t\t\t\t\t\t\t\t<h3 className=\"former\">$89.99</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ColorSelector colorChoice={this.colorChoice} color={color} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Button onAddToCart={this.onAddToCart} buttonLabel={buttonLabel} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-sm-6\">\n\t\t\t\t\t\t<Headphones color={color} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}